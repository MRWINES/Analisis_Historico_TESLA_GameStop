# -*- coding: utf-8 -*-
"""Analisis_Historico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4zU5YWfANB0adRUDTq_yQSIYYuHdnOS

Pregunta 1 - Extracción de datos de acciones de Tesla utilizando yfinance - 2 Puntos
"""

import yfinance as yf

# Extraer los datos de Tesla
tesla = yf.Ticker("TSLA")
tesla_history = tesla.history(period="5y")

# Mostrar los primeros datos
tesla_history.head()

"""Pregunta 2 - Extracción de datos de ingresos de Tesla utilizando Webscraping - 1 Puntos"""

import pandas as pd
import requests
from bs4 import BeautifulSoup

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, "html.parser")

tables = soup.find_all("table")

for table in tables:
    if "Revenue" in table.text:
        tesla_table = table
        break

tesla_revenue = pd.read_html(str(tesla_table))[0]

tesla_revenue.columns = ["Date", "Revenue"]
tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace(r"\$", "", regex=True).str.replace(",", "")
tesla_revenue = tesla_revenue[tesla_revenue["Revenue"] != ""]
tesla_revenue["Revenue"] = pd.to_numeric(tesla_revenue["Revenue"])

print(tesla_revenue.tail())

"""Pregunta 3 - Extracción de datos de acciones de GameStop utilizando yfinance - 2 Puntos"""

import yfinance as yf
import pandas as pd

gme = yf.Ticker("GME")
gme_data = gme.history(period="max")

gme_data.reset_index(inplace=True)

print(gme_data.head())

"""Pregunta 4 - Extracción de datos de ingresos de GameStop utilizando Webscraping - 1 Puntos"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"

#obtener el contenido de la pagina
response = requests.get(url)
soup = BeautifulSoup(response.content, "html.parser")

tables = soup.find_all("table")
for i, table in enumerate(tables):
    print(f"Tabla {i}:")
    print(table.prettify())  #imprimir las tablas ordenadas para visualizar
    print("----------------------------------------------------------------------------------------")

#obtener la cuarta tabla (índice 3 visualizado en tablas)
revenue_table = tables[0]

#convertir la tabla en un DataFrame
df = pd.read_html(str(revenue_table))[0]

#mostrar las últimas 5 filas
print(df.tail())

"""Pregunta 5 - Tablero de acciones e ingresos de Tesla - 2 Puntos"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import yfinance as yf

def make_graph(stock_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.index <= '2021-06-14']
    fig.add_trace(go.Scatter(x=stock_data_specific.index, y=stock_data_specific['Close'], name="Share Price"), row=1, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_layout(showlegend=False,
                      height=900,
                      title="Datos de acciones de Tesla",  #Titulo del grafico
                      xaxis_rangeslider_visible=True)
    fig.show()
#obtener datos de Tesla
tesla_ticker = yf.Ticker("TSLA")
tesla_data = tesla_ticker.history(period="max")
#llamar a la funcion para graficar
make_graph(tesla_data, "TSLA")

"""Pregunta 6 - Cuadro de mando de acciones e ingresos de GameStop - 2 Puntos"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import yfinance as yf

def make_graph(stock_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.index <= '2021-06-14']
    fig.add_trace(go.Scatter(x=stock_data_specific.index, y=stock_data_specific['Close'], name="Share Price"), row=1, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_layout(showlegend=False,
                      height=900,
                      title="Datos de acciones de GameStop",  #cambiado el titulo
                      xaxis_rangeslider_visible=True)
    fig.show()

#obtener datos de gamestop
gamestop_ticker = yf.Ticker("GME")
gamestop_data = gamestop_ticker.history(period="max")

#llamar a la funcion para graficar
make_graph(gamestop_data, "GME")

















